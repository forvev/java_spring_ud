<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<!--  load the properties file: sport.properties -->
    <context:property-placeholder location="classpath:sport.properties"/>
    
    <!--  define the dependency -->
    <!-- let's think about the rule. Why dependency injection? In our case, when we create an object, it's better to import
    some already created object. It's more efficient approach.  -->
    <bean id="myFortune"
       class = "com.luv2code.springdemo.HappyFortuneService">
    </bean>
    
    <bean id="myCoach"
    	class="com.luv2code.springdemo.TrackCoach">  
    	
    	<!-- Set up constructor injection -->
    	<constructor-arg ref="myFortune" />
    </bean>
    
    <bean id="myCricketCoach"
        class="com.luv2code.springdemo.CricketCoach"> 
        
        <!-- set up setter injection -->
        <property name="fortuneService" ref="myFortune" />
        
        <!--  injection literal values -->
		<property name="emailAddress" value="${foo.email}" />
		<property name="team" value="${foo.team}" />
    </bean>
    
    
</beans>





